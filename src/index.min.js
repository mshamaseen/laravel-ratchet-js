class Shama{constructor(e=null){if(null===e){let s=window.location.hostname,t="ws";"https:"===document.location.protocol&&(t+="s"),e=t+"://"+s}this.connection=new WebSocket(e),this.debugger=!1;let s=this;this.connection.onopen=function(e){s.onOpen(e)},this.connection.onmessage=function(e){s.onMessage(e)},this.connection.onclose=function(e){s.onClose(e)},this.connection.onerror=function(e){s.onError(e)},this.listeners={},this.defaultListeners(),this.session=null}onOpen(e){this.log("Connection established!"),this.send({route:"initializeWebsocket"})}onError(e){if(e.hasOwnProperty("message"))return this.error(e.message),!0;this.error(e)}onClose(e){this.error("WebSocket closed !")}onMessage(e){let s=JSON.parse(e.data);return s.hasOwnProperty("event")?("default"===s.event&&this.info("No specific info called from the server, default info is called."),s.event in this.listeners?this.listeners[s.event](s):(this.log(s),!1)):(this.error("response don't have a event property !"),!1)}addListeners(e,s){return"function"!=typeof s?(this.error("listeners value should be a function."),!1):(this.listeners[e]=s,!0)}send(e){if(!e.hasOwnProperty("route"))return this.error("no route specified"),!1;"string"==typeof this.session&&(e.session=this.session),this.connection.send(JSON.stringify(e))}initialize(e){this.log(e.message)}default(e){this.log(e)}defaultListeners(){this.addListeners("error",this.onError.bind(this)),this.addListeners("initialize",this.initialize.bind(this)),this.addListeners("default",this.default.bind(this))}log(e){if(!this.debugger)return!0;console.log(e)}error(e){if(!this.debugger)return!0;console.error(e)}info(e){if(!this.debugger)return!0;console.info(e)}}